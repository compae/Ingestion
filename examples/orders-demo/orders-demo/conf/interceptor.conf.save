morphlines: [

  {
    id: morphline1

    importCommands: ["org.kitesdk.**", "com.stratio.ingestion.morphline.**"]

    commands: [
      //{ logWarn { format : "output record: {}", args : ["@{}"] } }
      
      { readLine { charset : UTF-8 } }
                 

      {
        java { 
            imports : """
            import com.fasterxml.jackson.databind.JsonNode;
            import com.fasterxml.jackson.databind.ObjectMapper;
            import org.kitesdk.morphline.base.Fields;            
            import java.util.*;
            import java.text.DateFormat;
            import java.text.SimpleDateFormat;
            import java.math.BigInteger;
            import java.io.ByteArrayInputStream;
            """
            code : """
                
            // Json Fields name
            String ORDER_ID= "order_id";
            String TIMESTAMP= "timestamp";
            String DAY_TIME_ZONE= "day_time_zone";
            String CLIENT_ID= "client_id";
            String PAYMENT_METHOD= "payment_method";
            String LATITUDE= "latitude";
            String LONGITUDE= "longitude";
            String CREDIT_CARD= "credit_card";
            String SHOPPING_CENTER= "shopping_center";
            String CHANNEL= "channel";
            String CITY= "city";
            String COUNTRY= "country";
            String EMPLOYEE= "employee";
            String TOTAL_AMOUNT= "total_amount";
            String TOTAL_PRODUCTS= "total_products";
            String ORDER_SIZE= "order_size";
            String LINES= "lines";
         
            
            // Transformation rules values
            //String DATE_FORMAT= "yyyy-MM-dd'T'HH:mm:ss XXX";
            String DATE_FORMAT= "yyyy-MM-dd HH:mm:ss";
            int MORNING_THRESHOLD= 13;
            int AFTERNOON_THRESHOLD= 21;
            Double ORDER_SIZE_SMALL_THRESHOLD= 50.0;
            Double ORDER_SIZE_MEDIUM_THRESHOLD= 200.0;
            
            Map<String,String> LIST_BODY= new HashMap<String, String>();
            // City - Country mapping
            Map<String,String> LIST_COUNTRIES= new HashMap<String, String>();
            LIST_COUNTRIES.put("Sevilla", "SPAIN");
            LIST_COUNTRIES.put("Salamanca", "SPAIN");
            LIST_COUNTRIES.put("Valencia", "SPAIN");
            LIST_COUNTRIES.put("Barcelona", "SPAIN");
            LIST_COUNTRIES.put("Madrid", "SPAIN");
	    LIST_COUNTRIES.put("Rome", "ITALY");
            LIST_COUNTRIES.put("Paris", "FRANCE");
            LIST_COUNTRIES.put("Online", "SPAIN");
            LIST_COUNTRIES.put("Bilbao", "SPAIN");
            LIST_COUNTRIES.put("Malaga", "SPAIN");
            LIST_COUNTRIES.put("Vigo", "SPAIN");


            ObjectMapper objectMapper = new ObjectMapper();
            

            try {

                JsonNode rootNode= objectMapper.readTree(record.getFirstValue(Fields.MESSAGE).toString());        
                //JsonNode rootNode = (JsonNode) record.getFirstValue(Fields.MESSAGE); // Fields.ATTACHMENT_BODY

                logger.debug("My INPUT TEXT IS: {}", rootNode.toString());
                
                // Copying simple fields to headers
                if (rootNode.has(ORDER_ID))
                    record.put(ORDER_ID, rootNode.get(ORDER_ID).asText());                
                if (rootNode.has(CLIENT_ID))
                    record.put(CLIENT_ID, rootNode.get(CLIENT_ID).asInt());
                if (rootNode.has(PAYMENT_METHOD))
                    record.put(PAYMENT_METHOD, rootNode.get(PAYMENT_METHOD).asText());
                if (rootNode.has(LATITUDE))
                    record.put(LATITUDE, rootNode.get(LATITUDE).asDouble());
                if (rootNode.has(LONGITUDE))
                    record.put(LONGITUDE, rootNode.get(LONGITUDE).asDouble());
                if (rootNode.has(EMPLOYEE))
                    record.put(EMPLOYEE, rootNode.get(EMPLOYEE).asInt());                    
                if (rootNode.has(LINES))
                    record.put(LINES, rootNode.get(LINES).toString());                               
                
                
                if (rootNode.has(SHOPPING_CENTER))  {
                    String shoppingCenter= rootNode.get(SHOPPING_CENTER).asText();
                    if (shoppingCenter.equals("Online")) {
                        record.put(CHANNEL, "ONLINE");                          
                        record.put(CITY, "Madrid");
                        LIST_BODY.put(CHANNEL, "ONLINE");  
                        LIST_BODY.put(CITY, "Madrid"); 

                    } else if (shoppingCenter.equals("Offline")) {
                        record.put(CHANNEL, "OFFLINE");
                        record.put(CITY, "Madrid");
                        LIST_BODY.put(CHANNEL, "OFFLINE");  
                        LIST_BODY.put(CITY, "Madrid"); 

                    }   else    {
                        record.put(CHANNEL, "OFFLINE");
                        record.put(CITY, shoppingCenter);
                        LIST_BODY.put(CHANNEL, "OFFLINE");  
                        LIST_BODY.put(CITY, shoppingCenter);                         
                    }
                    
                    
                    
                    record.put(SHOPPING_CENTER, shoppingCenter);
                    record.put(COUNTRY, LIST_COUNTRIES.get( record.getFirstValue(CITY)));
                    
                    LIST_BODY.put(SHOPPING_CENTER, shoppingCenter);  
                    LIST_BODY.put(COUNTRY, LIST_COUNTRIES.get( record.getFirstValue(CITY)));  
                }
                
                if (rootNode.has(TIMESTAMP))  {
                    record.put(TIMESTAMP, rootNode.get(TIMESTAMP).asText());
                    DateFormat df = new SimpleDateFormat(DATE_FORMAT);
                    Calendar cal = Calendar.getInstance(TimeZone.getTimeZone("Europe/Madrid"));        
                    cal.setTime(df.parse(rootNode.get(TIMESTAMP).asText()));
                    int hourOfDay= cal.get(Calendar.HOUR_OF_DAY);
                    if (hourOfDay < MORNING_THRESHOLD)  {
                        record.put(DAY_TIME_ZONE, "morning");
                        LIST_BODY.put(DAY_TIME_ZONE, "morning");  
                    } else if (hourOfDay < AFTERNOON_THRESHOLD) {
                        record.put(DAY_TIME_ZONE, "afternoon");
                        LIST_BODY.put(DAY_TIME_ZONE, "afternoon");  
                    } else  {
                        record.put(DAY_TIME_ZONE, "noon");
                        LIST_BODY.put(DAY_TIME_ZONE, "noon");  
                    }
                        
                    //LIST_BODY.put(DAY_TIME_ZONE, record.get(DAY_TIME_ZONE));  
                }
                
                if (rootNode.has(LINES))  {
                    JsonNode listElements= objectMapper.readTree(rootNode.get(LINES).toString());
                    record.put(TOTAL_PRODUCTS, listElements.size());
                    LIST_BODY.put(TOTAL_PRODUCTS,  Integer.toString(listElements.size()));
                }
                
                if (rootNode.has(TOTAL_AMOUNT))  {
                    Double totalAmount= rootNode.get(TOTAL_AMOUNT).asDouble();
                    record.put(TOTAL_AMOUNT, rootNode.get(TOTAL_AMOUNT).asDouble());
                    if (totalAmount < ORDER_SIZE_SMALL_THRESHOLD)   {
                        record.put(ORDER_SIZE, "SMALL");
                        LIST_BODY.put(ORDER_SIZE, "SMALL");
                    } else if (totalAmount < ORDER_SIZE_MEDIUM_THRESHOLD) {
                        record.put(ORDER_SIZE, "MEDIUM");
                        LIST_BODY.put(ORDER_SIZE, "MEDIUM");
                    } else {
                        record.put(ORDER_SIZE, "BIG");
                        LIST_BODY.put(ORDER_SIZE, "BIG");
                    }
                    
                }
                
                if (rootNode.has(CREDIT_CARD))  {
                    String originalCreditCard= rootNode.get(CREDIT_CARD).asText();
                    BigInteger creditCard= new BigInteger(originalCreditCard.replaceAll("[^0-9]",""));
                    record.put(CREDIT_CARD, creditCard);
                }
                
                String jsonLine= rootNode.toString().trim();
                jsonLine = jsonLine.substring(0, jsonLine.length()-1);

                for (String key: LIST_BODY.keySet())    {
                    jsonLine += ", \""+ key + "\": \"" + LIST_BODY.get(key) + "\"";
                }                
                //for (String key: LIST_BODY.keySet())    {
                
                //Set<String> keys= LIST_BODY.keySet();
                //Iterator itr= keys.iterator();
                //while (itr.hasNext())   {
                //    String key= (String) itr.next();
                //    jsonLine += ", \""+ key + "\": \"" + LIST_BODY.get(key) + "\"";
                //}

                jsonLine += "}";
                
                //logger.info("------> JSON LINE: " + jsonLine);
                
                record.put(Fields.ATTACHMENT_BODY, new ByteArrayInputStream(jsonLine.getBytes()));
                                
            } catch (java.io.IOException e) {
		e.printStackTrace();
            } catch (java.text.ParseException e) {            
		e.printStackTrace();
            } catch (Exception e) {            
		e.printStackTrace();
            }        

                
            //logger.info("My output record: {}", record);
            return child.process(record);
            """
            } 
        }
      
      //{
      //   convertTimestamp {
      //    field: timestamp
      //    inputFormats: ["yyyy-MM-dd'T'HH:mm:ss XXX"]
      //    outputFormat: "yyyy-MM-dd HH:mm:ss"          
      //    inputTimezone: UTC          
      //    outputTimezone: UTC          
      //  }
      //}
      
      // Add @timestamp for ElasticSearch
//      {
//        addValues {
//          "@timestamp": "@{timestamp}"
//          "eventDatetime": "@{timestamp}"
//        }
//      }
      
      {
         convertTimestamp {
          field: timestamp
          inputFormats: ["yyyy-MM-dd HH:mm:ss"]
          outputFormat: "yyyy/MM/dd HH:mm:ss"          
          inputTimezone: UTC          
          outputTimezone: UTC          
        }
      }
      
      { logWarn { format : "=====> Output Record: {}", args : ["@{}"] } }    
      
      
      
      //{
      //if {
      //  conditions : [
      //      { equals { shopping_center : Online } }
      //  ]
      //  then : [
      //      { logTrace { format : "Setting shopping_ceter to ONLINE {}", args : ["@{}"] } }
      //      { addValues{ channel: [ONLINE] } }
      //  ]
      //  else : [
      //      { logTrace { format : "Setting shopping_ceter to OFFLINE {}", args : ["@{}"] } }
      //      { addValues{ channel: [OFFLINE] } }
      //  ]
      //  }
      //}
      


  
    
    
    ]
  }
]
